<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 removedFromStage="onRemovedFromStage(event);"
		 width="100%"
		 height="100%"
		 name="chatMasterView">
	<fx:Script>
		<![CDATA[
			import mx.core.IVisualElement;
			import mx.events.ModuleEvent;

			import spark.components.RichText;
			import spark.layouts.VerticalLayout;
			import spark.modules.ModuleLoader;

			import yourdomain.common.controllers.events.AlertEvent;
			import yourdomain.common.controllers.events.InterModularEvent;
			import yourdomain.common.controllers.interfaces.IModules;
			import yourdomain.common.models.vo.ModulesVO;
			import yourdomain.modules.chatModule.models.vos.ChatEnum;

			/**
			 *
			 * @author Ondina D. F.
			 */
			protected var moduleLoader:ModuleLoader;
			protected var moudulesCounter:int=1;
			protected var currentModuleLoader:Dictionary=new Dictionary();

			//============================================================================
			// Init
			//============================================================================
			public function initView():void
			{
				addListeners();
			}

			protected function addListeners():void
			{
				messageToSend.addEventListener(MouseEvent.DOUBLE_CLICK, onClearMessage);
				loadModuleButton.addEventListener(MouseEvent.CLICK, onLoadModule);
				unloadModuleButton.addEventListener(MouseEvent.CLICK, onUnloadAllModules);
				toModulesButton.addEventListener(MouseEvent.CLICK, onSendMessage);
			}

			//============================================================================
			// Load  Module
			//============================================================================
			public function onLoadModule(event:MouseEvent=null):void
			{
				if (channelChooser.selectedIndex == -1)
				{
					dispatchEvent(new AlertEvent(AlertEvent.ERROR_ALERT, "Please choose a dispatcher."));
					return;
				}
				if (moudulesCounter > 12)
				{
					dispatchEvent(new AlertEvent(AlertEvent.ERROR_ALERT, "Only 12 modules allowed in this demo."));
					return;
				}
				var moduleUrl:String="yourdomain/modules/chatModule/views/components/ChatView.swf";
				moduleLoader=new ModuleLoader();
				moduleLoader.addEventListener(ModuleEvent.READY, onModuleReady);
				moduleLoader.addEventListener(ModuleEvent.ERROR, onModuleError);
				moduleLoader.loadModule(moduleUrl);
				loaderContainer.addElement(moduleLoader);
			}

			//============================================================================
			// Module   Loaded
			//============================================================================
			protected function onModuleReady(event:ModuleEvent):void
			{
				var iModule:*=event.currentTarget.child as IModules;
				if (!iModule)
					return;

				iModule.modulesVO=new ModulesVO();
				iModule.modulesVO.moduleName="Chat " + moudulesCounter;
				iModule.modulesVO.channelNumber=channelChooser.selectedItem.ordinal;
				iModule.modulesVO.customDispatcher=channelChooser.selectedItem.name;
				currentModuleLoader[iModule.modulesVO.moduleName]=event.currentTarget;
				moudulesCounter++;
			}

			//============================================================================
			// Module   Error
			//============================================================================
			protected function onModuleError(event:ModuleEvent):void
			{
				dispatchEvent(new AlertEvent(AlertEvent.ERROR_ALERT, event.errorText));
				event.currentTarget.removeEventListener(ModuleEvent.ERROR, onModuleError);
			}

			//============================================================================
			// Unload  One Module
			//============================================================================
			public function onUnloadModule(modVO:ModulesVO):void
			{
				var moduleName:String=modVO.moduleName;
				loaderContainer.removeElement(currentModuleLoader[moduleName] as IVisualElement);
				currentModuleLoader[moduleName].unloadModule();
				delete currentModuleLoader[moduleName];
			}

			//============================================================================
			// Unload  All Modules
			//============================================================================
			protected function onUnloadAllModules(event:MouseEvent=null):void
			{
				resetInputs();
				for (var moduleName:String in currentModuleLoader)
				{
					currentModuleLoader[moduleName].unloadModule();
					delete currentModuleLoader[moduleName];
				}
				loaderContainer.removeAllElements();
				moudulesCounter=1;
				System.pauseForGCIfCollectionImminent(0.05);
			}

			//============================================================================
			// Send Message to Modules
			//============================================================================
			protected function onSendMessage(event:MouseEvent):void
			{
				if (messageToSend.text == "")
					return;
				var modulesVO:ModulesVO=new ModulesVO();
				modulesVO.messageContent=messageToSend.text;
				modulesVO.moduleName="Shell";
				modulesVO.channelNumber=0;
				dispatchEvent(new InterModularEvent(InterModularEvent.SHELL_TO_MODULE, modulesVO));
			}

			//============================================================================
			// Message from Modules
			//============================================================================
			public function onMessageReceived(modVO:ModulesVO):void
			{
				var color:String=modVO.channelsColor;
				var textElement:RichText=new RichText()
				textElement.text="From " + modVO.moduleName + ": " + modVO.messageContent;
				textElement.setStyle("color", color);

				receivedMessage.addElement(textElement);
				receivedMessage.validateNow();
				var index:Number=receivedMessage.getElementIndex(textElement);
				scrollingContent(index);
			}

			//============================================================================
			// Scroll received messages content
			//============================================================================
			protected function scrollingContent(index:Number):void
			{
				var verticalLayout:VerticalLayout=receivedMessage.layout as VerticalLayout;
				if (verticalLayout.fractionOfElementInView(index) < 1)
					verticalLayout.verticalScrollPosition+=verticalLayout.getScrollPositionDeltaToElement(index).y;
				receivedMessage.verticalScrollPosition=verticalLayout.verticalScrollPosition;
			}

			//============================================================================
			// Clean up
			//============================================================================
			protected function resetInputs():void
			{
				channelChooser.selectedIndex=-1;
				messageToSend.text="";
				receivedMessage.removeAllElements();
			}

			protected function onClearMessage(event:MouseEvent):void
			{
				event.currentTarget.text="";
			}

			protected function onRemovedFromStage(event:Event):void
			{
				onUnloadAllModules();
				removeListeners();
			}

			protected function removeListeners():void
			{
				messageToSend.removeEventListener(MouseEvent.DOUBLE_CLICK, onClearMessage);
				loadModuleButton.removeEventListener(MouseEvent.CLICK, onLoadModule);
				unloadModuleButton.removeEventListener(MouseEvent.CLICK, onUnloadAllModules);
				toModulesButton.removeEventListener(MouseEvent.CLICK, onSendMessage);
			}
		]]>
	</fx:Script>
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<s:BorderContainer x="10"
					   y="10"
					   width="526">
		<s:HGroup x="10"
				  y="4"
				  gap="23"
				  verticalAlign="middle">
			<s:Label id="moduleId"
					 text="Shell"/>
			<s:DropDownList id="channelChooser"
							width="159"
							dataProvider="{ChatEnum.comboList}"
							fontSize="16"
							labelField="name"
							prompt="Choose a dispatcher"
							selectedIndex="-1"/>
			<s:Button id="loadModuleButton"
					  label="load module"/>
			<s:Button id="unloadModuleButton"
					  label="unload all modules"/>
		</s:HGroup>
		<s:TextArea id="messageToSend"
					x="243"
					y="51"
					width="274"
					height="67"
					doubleClickEnabled="true"/>
		<s:Button id="toModulesButton"
				  x="386"
				  y="136"
				  label="send to modules"/>
		<s:BorderContainer x="10"
						   y="51">
			<s:Scroller width="200"
						height="106"
						id="scroller">
				<s:viewport>
					<s:VGroup x="10"
							  y="41"
							  width="200"
							  height="85"
							  id="receivedMessage"
							  clipAndEnableScrolling="true">
					</s:VGroup>
				</s:viewport>
			</s:Scroller>
		</s:BorderContainer>
		<s:Label x="10"
				 y="36"
				 text="Received messages:"/>
		<s:Label x="243"
				 y="36"
				 text="Write a message:(dbl click to clear)"/>
	</s:BorderContainer>
	<s:TileGroup id="loaderContainer"
				 x="10"
				 y="183"
				 width="913"
				 orientation="rows"
				 requestedColumnCount="4">
	</s:TileGroup>
</s:Group>
