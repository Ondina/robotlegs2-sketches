<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the middle buttons in a Spark ButtonBar component.

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
			 xmlns:s="library://ns.adobe.com/flex/spark"
			 minWidth="21"
			 minHeight="21"
			 alpha.disabledStates="0.5">

	<!-- host component -->
	<fx:Metadata>
		<![CDATA[
		/**
		* @copy spark.skins.default.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.ButtonBarButton")]
		]]>
	</fx:Metadata>

	<fx:Script>
		/* Define the skin elements that should not be colorized.
		For toggle button, the graphics are colorized but the label is not. */
		static private const exclusions:Array=["labelElement"];
		static private const RadiusX:Number=0;
		static private const RadiusY:Number=0;
		static private const FillColor:Number=0xFAF9F9;
		static private const OverColor:Number=0xE2D8D7;
		static private const DownColor:Number=0xD8BCBA;

		static private const TextSize:Number=11;
		static private const TextColor:Number=0x000000;
		static private const TextOverColor:Number=0xFFFFFF;
		static private const TextDownColor:Number=0xEA594E;

		/**
		 * @copy spark.skins.SparkSkin#colorizeExclusions
		 */
		override public function get colorizeExclusions():Array
		{
			return exclusions;
		}
	</fx:Script>

	<!-- states -->
	<s:states>
		<s:State name="up"/>
		<s:State name="over"
				 stateGroups="overStates"/>
		<s:State name="down"
				 stateGroups="downStates"/>
		<s:State name="disabled"
				 stateGroups="disabledStates"/>
		<s:State name="upAndSelected"
				 stateGroups="selectedStates, selectedUpStates"/>
		<s:State name="overAndSelected"
				 stateGroups="overStates, selectedStates"/>
		<s:State name="downAndSelected"
				 stateGroups="downStates, selectedStates"/>
		<s:State name="disabledAndSelected"
				 stateGroups="selectedUpStates, disabledStates, selectedStates"/>
	</s:states>

	<!-- layer 1: shadow -->
	<s:Rect left="0"
			right="0"
			bottom="-1"
			height="1"
			radiusX="{getStyle('radiusX')}"
			radiusY="{getStyle('radiusY')}">
		<s:fill>
			<s:SolidColor color="0x000000"
						  color.downStates="0xFFFFFF"
						  alpha="0.07"
						  alpha.downStates="0.5"/>
		</s:fill>
	</s:Rect>
	<s:Rect id="filling"
			left="1"
			right="1"
			top="1"
			bottom="1"
			radiusX="{getStyle('radiusX')}"
			radiusY="{getStyle('radiusY')}">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry id="fill1"
								 color="0xFFFFFF"
								 color.selectedUpStates="{getStyle('color1')}"
								 color.overStates="{getStyle('color1')}"
								 color.downStates="{getStyle('color1')}"
								 alpha="0.85"
								 alpha.overAndSelected="1"/>
				<s:GradientEntry id="fill2"
								 color="0xD8D8D8"
								 color.selectedUpStates="{getStyle('color2')}"
								 color.over="{getStyle('color3')}"
								 color.overAndSelected="{getStyle('color2')}"
								 color.downStates="{getStyle('color2')}"
								 alpha="0.85"
								 alpha.overAndSelected="1"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>

	<!-- layer 3: fill lowlight -->
	<s:Rect left="1"
			right="1"
			bottom="1"
			height="9"
			radiusX="{getStyle('radiusX')}"
			radiusY="{getStyle('radiusY')}">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="{getStyle('color1')}"
								 alpha="0.0099"/>
				<s:GradientEntry color="{getStyle('color2')}"
								 alpha="0.0627"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>

	<!-- layer 4: fill highlight -->
	<s:Rect left="1"
			right="1"
			top="1"
			height="9">
		<s:fill>
			<s:SolidColor color="0xFFFFFF"
						  alpha="0.33"
						  alpha.selectedUpStates="0.22"
						  alpha.overStates="0.22"
						  alpha.downStates="0.12"/>
		</s:fill>
	</s:Rect>
	<!-- layer 5: highlight stroke (all states except down) -->
	<s:Rect left="1"
			right="1"
			top="1"
			bottom="1"
			excludeFrom="downStates"
			radiusX="{getStyle('radiusX')}"
			radiusY="{getStyle('radiusY')}">
		<s:stroke>
			<s:LinearGradientStroke rotation="90"
									weight="1">
				<s:GradientEntry color="0xFFFFFF"
								 alpha.overStates="0.22"
								 alpha.selectedUpStates="0.33"/>
				<s:GradientEntry color="{getStyle('color1')}"
								 alpha.overStates="0.22"
								 alpha.selectedUpStates="0.33"/>
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>
	<s:Rect left="1"
			top="1"
			bottom="1"
			width="1"
			includeIn="downStates, selectedUpStates, overAndSelected"
			radiusX="{getStyle('radiusX')}"
			radiusY="{getStyle('radiusY')}">
		<s:fill>
			<s:LinearGradient rotation="90"
							  scaleX="15.4663"
							  x="70.044"
							  y="0">
				<s:GradientEntry color="{getStyle('color1')}"
								 ratio="0"/>
				<s:GradientEntry color="{getStyle('color2')}"
								 ratio="1"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	<!-- layer 7: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
	<s:Rect left="0"
			right="0"
			top="0"
			bottom="0"
			height="26"
			radiusX="{getStyle('radiusX')}"
			radiusY="{getStyle('radiusY')}">
		<s:stroke>
			<s:LinearGradientStroke rotation="90"
									weight="1">
				<s:GradientEntry color="0xb2dc32"
								 alpha="0.5625"
								 alpha.down="0.4375"
								 alpha.selectedStates="0.4375"/>
				<s:GradientEntry color="0xb2dc32"
								 alpha="0.65"
								 alpha.down="0.75"
								 alpha.selectedStates="0.75"/>
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>

	<!-- layer 8: text -->
	<!--- The defines the appearance of the label(s) for the middle button(s) in the ButtonBar component. -->
	<s:Label id="labelDisplay"
			 textAlign="center"
			 verticalAlign="middle"
			 fontWeight="bold"
			 fontSize="{TextSize}"
			 maxDisplayedLines="1"
			 horizontalCenter="0"
			 verticalCenter="1"
			 left="10"
			 right="10"
			 top="2"
			 bottom="2">
	</s:Label>
</s:SparkSkin>
